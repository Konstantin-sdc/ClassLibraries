<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentExceptionMessage" xml:space="preserve">
    <value>Invalid argumnt in</value>
  </data>
  <data name="BasicComplexDesc" xml:space="preserve">
    <value>Represents the base data set for all derived classes.</value>
  </data>
  <data name="BasicComplexName" xml:space="preserve">
    <value>Base dada set</value>
  </data>
  <data name="BasicDataGroup" xml:space="preserve">
    <value>Total info</value>
  </data>
  <data name="CloneName" xml:space="preserve">
    <value>Returns a copy of the instance.</value>
  </data>
  <data name="CompareForSort" xml:space="preserve">
    <value>Compare for sort order</value>
  </data>
  <data name="CompareToObjectDesc" xml:space="preserve">
    <value>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance is located before, after, or at the same position in the sort order as another object.</value>
  </data>
  <data name="CompareToOtherDesc" xml:space="preserve">
    <value>Compares the current instance with another and returns an integer that indicates whether the current instance is located before, after, or at the same position in the sort order as the other instance.</value>
  </data>
  <data name="CoordsDesc" xml:space="preserve">
    <value>The coordinates of a point or object in space. Space is not necessarily three-dimensional.</value>
  </data>
  <data name="CoordsName" xml:space="preserve">
    <value>Coordinates</value>
  </data>
  <data name="DataComparisonGroup" xml:space="preserve">
    <value>Data comparison</value>
  </data>
  <data name="DescriptionDesc" xml:space="preserve">
    <value>Description of the entity. Short and clear, - that this essence from itself represents.</value>
  </data>
  <data name="DescriptionName" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="EqualsObjectDesc" xml:space="preserve">
    <value>Returns the result of checking the equivalence of the current instance with another object.</value>
  </data>
  <data name="EqualsObjectName" xml:space="preserve">
    <value>Check equivalence with another object</value>
  </data>
  <data name="EqualsOtherDesc" xml:space="preserve">
    <value>Returns the result of checking the equivalence of the current instance with another instance.</value>
  </data>
  <data name="EqualsOtherName" xml:space="preserve">
    <value>Check equivalence with another instance</value>
  </data>
  <data name="EqualsTwoName" xml:space="preserve">
    <value>Are the two objects equivalent?</value>
  </data>
  <data name="GeometricPointDesc" xml:space="preserve">
    <value>It is determined only by its coordinates.</value>
  </data>
  <data name="GeometricPointName" xml:space="preserve">
    <value>Geometric point</value>
  </data>
  <data name="HashCodeCurrent" xml:space="preserve">
    <value>The current instance hash code</value>
  </data>
  <data name="HashCodeTarget" xml:space="preserve">
    <value>Hash code of the specified object</value>
  </data>
  <data name="InvalidStringDescripttion" xml:space="preserve">
    <value>The string consists of delimiters only or is empty.</value>
  </data>
  <data name="InvalidValueInitialise" xml:space="preserve">
    <value>An attempt to create a value not provided for in a given System of Units.</value>
  </data>
  <data name="MeasuredParameters" xml:space="preserve">
    <value>Measured parameters</value>
  </data>
  <data name="ParityDesc" xml:space="preserve">
    <value>Returns the result of checking for parity by value.</value>
  </data>
  <data name="ParityName" xml:space="preserve">
    <value>Check for parity</value>
  </data>
  <data name="StringComparisonDefault" xml:space="preserve">
    <value>The rule of checking strings for equivalence by default</value>
  </data>
  <data name="StringComparisonDesc" xml:space="preserve">
    <value>The rule for checking strings for equivalence with the established rule for checking.</value>
  </data>
  <data name="StringComparisonName" xml:space="preserve">
    <value>Equivalence String Validation Rule</value>
  </data>
  <data name="TitleDesc" xml:space="preserve">
    <value>The name of the entity. Clear enough to distinguish it from others. Short enough to be a name.</value>
  </data>
  <data name="TitleName" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="UnParityDesc" xml:space="preserve">
    <value>Returns the result of checking for unparity by value.</value>
  </data>
  <data name="UnParityName" xml:space="preserve">
    <value>Check for unparity</value>
  </data>
</root>